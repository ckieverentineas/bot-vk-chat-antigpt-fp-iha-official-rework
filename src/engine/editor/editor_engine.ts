import { Answer, Unknown } from "@prisma/client";
import prisma from "../../module/prisma";
import { compareTwoStrings } from 'string-similarity';
import { Context, Keyboard } from "vk-io";

async function Save_Answer(text: string, id_question: number): Promise<Answer | false> {
    const unknownQuestions: Answer[] = await prisma.answer.findMany({ where: { id_question: id_question } })
    for (const unknownQuestion of unknownQuestions) {
        const cosineScore = compareTwoStrings(text, unknownQuestion.answer,);
        if (cosineScore >= 0.8) {
            return unknownQuestion
        }
    }
    return false
}

export async function Editor_Engine(context: Context): Promise<boolean> {

    const res: { working: boolean } = { working: true }
    while (res.working) {
        const input: any = await context.question(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n\n –ö–æ–º–∞–Ω–¥—ã:\n!–≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è;\n!–≤—ã–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç - –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –µ–≥–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è;\n!–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '!–≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å', payload: { command: 'student' }, color: 'secondary' }).row()
                .textButton({ label: '!–≤—ã–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç', payload: { command: 'professor' }, color: 'secondary' }).row()
                .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .oneTime().inline()
            }
        );
        const functions: any = {
            '!–≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å': Select_Question,
            '!–≤—ã–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç': Select_Answer,
            '!–æ—Ç–º–µ–Ω–∞': Select_Cancel,
        };
        if (input?.text in functions) {
            const commandHandler = functions[input.text];
            await commandHandler(context, res);
            if (input.text == '!–æ—Ç–º–µ–Ω–∞') { return false }
        } else {
            await context.send(`–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É`)
        }
    }
    return true;
}

async function Select_Answer(context: Context, res: { working: boolean }): Promise<void> {
    let value_check = false
    const question: { id: number | null, text: String | null, text_edit: string | null, crdate: Date | null, id_question: number | null, text_question: string | null,} = { id: null, text: null, crdate: null, id_question: null, text_question: null, text_edit: null }
	while (value_check == false) {
		const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–≤–µ—Ç–∞:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .oneTime().inline()
            }
        )
        if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
        if (uid.text == '!–æ—Ç–º–µ–Ω–∞') { value_check = true; return }
		if (/^(0|-?[1-9]\d{0,5})$/.test(uid.text)) {
            const answer = await prisma.answer.findFirst({ where: { id: Number(uid.text) } })
            if (answer) {
                const quest = await prisma.question.findFirst({ where: { id: answer.id_question } })
                if (quest) {
                    question.id = answer.id
                    question.text = answer.answer
                    question.crdate = answer.crdate
                    question.id_question = quest.id
                    question.text_question = quest.text
                    question.text_edit = answer.answer
                } else { return }
                value_check = true
            } else {
                await context.send(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–¥ ID${uid.text}`)
            }
        } else { await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!`) }
    }
    let value_pass = false
    while (value_pass == false) {
        const input: any = await context.question(`–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –∫ –≤–æ–ø—Ä–æ—Å—É ID${question.id_question} ${question.text_question}:\nID: ${question.id}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${question.text}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${question.crdate}\n\n –ö–æ–º–∞–Ω–¥—ã:\n!—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç;\n!—É–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç;\n!–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '!—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', payload: { command: 'student' }, color: 'secondary' }).row()
                .textButton({ label: '!—É–¥–∞–ª–∏—Ç—å', payload: { command: 'professor' }, color: 'secondary' }).row()
                .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .oneTime().inline()
            }
        );
        const functions: any = {
            '!—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å': Edit_Answer,
            '!—É–¥–∞–ª–∏—Ç—å': Delete_Answer,
            '!–æ—Ç–º–µ–Ω–∞': Select_Cancel,
        };
        if (input?.text in functions) {
            const commandHandler = functions[input.text];
            await commandHandler(context, question);
            if (input.text == '!–æ—Ç–º–µ–Ω–∞') { value_pass = true  }
        } else {
            await context.send(`–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É`)
        }
    }
    async function Edit_Answer(context: Context, question: { id: number, text: String, text_edit: string, crdate: Date, id_question: number, text_question: String,}) {
        let ender = true
        while (ender) {
            const check = await Save_Answer(question.text_edit, question.id_question)
            const text_smart = check ? `–í–Ω–∏–º–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å [${question.text_question}] –ø–æ–¥ ID${check.id} [${check.answer}]` : ``
            const corrected = await context.question(`–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞:\n[${question.text}] --> [${question.text_edit}]\n\n–ù–∞–ø–∏—à–∏—Ç–µ !—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—Å–ª–∏ –≤–∞—Å –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç. –∏–Ω–∞—á–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞\n\n ${text_smart}`,
                {	
                    keyboard: Keyboard.builder()
                    .textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
                    .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
                    .oneTime().inline()
                }
            )
            if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                let save_pass = await prisma.answer.findFirst({ where: { id: question.id } });
                if (save_pass) {
                    const save = await prisma.answer.update({ where: { id: question.id }, data: { answer: question.text_edit } })
                    question.text = save.answer
                    question.text_edit = save.answer
                    await context.send(`–î–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID${question.id_question} ${question.text_question} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –æ—Ç–≤–µ—Ç ID${save_pass.id}:\n[${save_pass.answer}] --> [${save.answer}]`)
                }
                res.working = false
                ender = false
            } else {
                if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
                    ender = false
                } else {
                    question.text_edit = corrected.text
                }
            }
        }
        value_pass = true
    }
    async function Delete_Answer(context: Context, question: { id: number, text: String, text_edit: string, crdate: Date, id_question: number, text_question: String,}) {
        let ender = true
        while (ender) {
            const corrected = await context.question(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –∫ –≤–æ–ø—Ä–æ—Å—É ID${question.id_question} ${question.text_question}:\nID: ${question.id}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${question.text}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${question.crdate}\n\n–ù–∞–ø–∏—à–∏—Ç–µ !–¥–∞ –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ. –∏–Ω–∞—á–µ !–Ω–µ—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è`,
                {	
                    keyboard: Keyboard.builder()
                    .textButton({ label: '!–¥–∞', payload: { command: 'student' }, color: 'secondary' })
                    .textButton({ label: '!–Ω–µ—Ç', payload: { command: 'citizen' }, color: 'secondary' })
                    .oneTime().inline()
                }
            )
            if (corrected.text == '!–¥–∞') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                let save_pass = await prisma.answer.findFirst({ where: { id: question.id } });
                if (save_pass) {
                    const save = await prisma.answer.delete({ where: { id: question.id } })
                    await context.send(`–î–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID${question.id_question} ${question.text_question} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –æ—Ç–≤–µ—Ç ID${save_pass.id}:\n[${save.answer}]`)
                }
                res.working = false
                ender = false
            } else {
                ender = false
            }
        }
        value_pass = true
    }
}

async function Select_Question(context: Context, res: { working: boolean }): Promise<void> {
    let value_check = false
    const question: { id: number | null, text: String | null, text_edit: string | null} = { id: null, text: null, text_edit: null }
	while (value_check == false) {
		const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .oneTime().inline()
            }
        )
        if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
        if (uid.text == '!–æ—Ç–º–µ–Ω–∞') { value_check = true; return }
		if (/^(0|-?[1-9]\d{0,5})$/.test(uid.text)) {
            const ques = await prisma.question.findFirst({ where: { id: Number(uid.text) } })
            if (ques) {
                question.id = ques.id
                question.text = ques.text
                question.text_edit = ques.text
                value_check = true
            } else {
                await context.send(`–ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –ø–æ–¥ ID${uid.text}`)
            }
        } else { await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!`) }
    }
    let value_pass = false
    while (value_pass == false) {
        const input: any = await context.question(`–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\nID: ${question.id}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${question.text}\n\n –ö–æ–º–∞–Ω–¥—ã:\n!—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å;\n!—É–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å;\n!–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å.`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '!—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', payload: { command: 'student' }, color: 'secondary' }).row()
                .textButton({ label: '!—É–¥–∞–ª–∏—Ç—å', payload: { command: 'professor' }, color: 'secondary' }).row()
                .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .oneTime().inline()
            }
        );
        const functions: any = {
            '!—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å': Edit_Question,
            '!—É–¥–∞–ª–∏—Ç—å': Delete_Question,
            '!–æ—Ç–º–µ–Ω–∞': Select_Cancel,
        };
        if (input?.text in functions) {
            const commandHandler = functions[input.text];
            await commandHandler(context, question);
            if (input.text == '!–æ—Ç–º–µ–Ω–∞') { value_pass = true  }
        } else {
            await context.send(`–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É`)
        }
    }
    async function Edit_Question(context: Context, question: { id: number, text: String, text_edit: string}) {
        let ender = true
        while (ender) {
            const corrected = await context.question(`–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞:\n[${question.text}] --> [${question.text_edit}]\n\n–ù–∞–ø–∏—à–∏—Ç–µ !—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—Å–ª–∏ –≤–∞—Å –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç. –∏–Ω–∞—á–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞`,
                {	
                    keyboard: Keyboard.builder()
                    .textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
                    .textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
                    .oneTime().inline()
                }
            )
            if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                let save_pass = await prisma.question.findFirst({ where: { id: question.id } });
                if (save_pass) {
                    const save = await prisma.question.update({ where: { id: question.id }, data: { text: question.text_edit } })
                    question.text = save.text
                    question.text_edit = save.text
                    await context.send(`–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –≤–æ–ø—Ä–æ—Å ID${save_pass.id}:\n[${save_pass.text}] --> [${save.text}]`)
                }
                res.working = false
                ender = false
            } else {
                if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
                    ender = false
                } else {
                    question.text_edit = corrected.text
                }
            }
        }
        value_pass = true
    }
    async function Delete_Question(context: Context, question: { id: number, text: String, text_edit: string}) {
        let ender = true
        while (ender) {
            const question_counter = await prisma.answer.count({ where: { id_question: question.id } })
            const corrected = await context.question(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\nID: ${question.id}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${question.text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ !–¥–∞ –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ. –∏–Ω–∞—á–µ !–Ω–µ—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è\n\n –¢–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∫ –Ω–µ–º—É: ${question_counter}`,
                {	
                    keyboard: Keyboard.builder()
                    .textButton({ label: '!–¥–∞', payload: { command: 'student' }, color: 'secondary' })
                    .textButton({ label: '!–Ω–µ—Ç', payload: { command: 'citizen' }, color: 'secondary' })
                    .oneTime().inline()
                }
            )
            if (corrected.text == '!–¥–∞') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                let save_pass = await prisma.question.findFirst({ where: { id: question.id } });
                if (save_pass) {
                    
                    const save = await prisma.question.delete({ where: { id: question.id } })
                    await context.send(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –≤–æ–ø—Ä–æ—Å ID${save_pass.id}:\n[${save.text}]\n\n –¢–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∫ –Ω–µ–º—É: ${question_counter}`)
                }
                res.working = false
                ender = false
            } else {
                ender = false
            }
        }
        value_pass = true
    }
}

async function Select_Cancel(context: Context, res: { working: boolean }): Promise<void> {
    await context.send(`–û—Ç–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`)
    res.working = false
}