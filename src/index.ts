import { Context, MessageContext, VK } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import { QuestionManager, IQuestionMessageContext } from 'vk-io-question';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { registerCommandRoutes } from './engine/command';
const natural = require('natural');
import * as dotenv from "dotenv";
import { Analyzer_Core_Edition } from './engine/core/analyzer_controller';
import { Answer_Core_Edition } from './engine/core/reseacher_controller';
import { updateStatuses } from './module/status_changer';
import { randomInt } from 'crypto';
import prisma from './module/prisma';
import { Prefab_Engine } from './engine/prefab/prefab_engine';
import { Replacer_System_Params } from './engine/reseacher/specializator';
import { Sleep } from './engine/helper';
import { Answer_Offline } from './engine/offline_answer';
dotenv.config();



export const root: number = Number(process.env.root) //root user

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();

export const tokenizer = new natural.AggressiveTokenizerRu()
export const tokenizer_sentence = new natural.SentenceTokenizer()
export const starting_date = new Date(); // –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

/* —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª–∏—Ü–µ–∑—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
prisma.$use(async (params, next) => {
	const before = Date.now()
	const result = await next(params)
	const after = Date.now()
	console.log(`Query ${params.model}.${params.action} took ${after - before}ms`)
	return result
})
*/


export interface VKs_Info {
	idvk: number,
	type: string
}
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ VK (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞)
type VkEntityType = 'page' | 'group';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Vk-—Å—É—â–Ω–æ—Å—Ç–∏
type VkEntity = {
	token: string,
	idvk: number,
	type: VkEntityType
};

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö Vk-—Å—É—â–Ω–æ—Å—Ç—è—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
const vkEntities: VkEntity[] = JSON.parse(String(process.env.VK_ENTITIES)) || '[]';
// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç VK –¥–ª—è –∫–∞–∂–¥–æ–π Vk-—Å—É—â–Ω–æ—Å—Ç–∏
export const vks: VK[] = [];
export const vks_info: VKs_Info[] = [];
async function Group_Id_Get(token: string) {
	const vk = new VK({ token: token, apiLimit: 1 });
	const [group] = await vk.api.groups.getById(vk);
	const groupId = group.id;
	return groupId
}
async function User_Id_Get(token: string) {
	const vk = new VK({ token: token, apiLimit: 1 });
	const [user] = await vk.api.users.get(vk);
	const groupId = user.id;
	return groupId
}
function Id_Getter(target: string, token: string) {
	const functions: any = {
		'group': Group_Id_Get,
		'page': User_Id_Get,
	};
	const commandHandler = functions[target];
	const res = commandHandler(token).then((data: any) => { return data })
	return res
}

Promise.all(vkEntities.map(async entity => {
	try {
		//let idvk = entity.type === 'group' ? Number((await Group_Id_Get(entity.token))) : Number(await User_Id_Get(entity.token))
		const idvk = await Id_Getter(entity.type, entity.token).then((data: any) => { return data })
		//console.log(idvk);
		// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
		const vk = new VK({
		  token: entity.token,
		  apiLimit: 1,
		  pollingGroupId: entity.type === 'group' ? idvk : undefined,
		});
		vks.push(vk);
		vks_info.push({ idvk: idvk, type: entity.type });
	} catch (error) {
		console.error(error);
	}
	return [vks, vks_info]
})).then(()=>{
	vks.map(vk => {
		//console.log(vks_info)
		//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
		vk.updates.use(questionManager.middleware);
		vk.updates.on('message_new', hearManager.middleware);
		//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
		InitGameRoutes(hearManager)
		registerUserRoutes(hearManager)
		registerCommandRoutes(hearManager)
		//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
		vk.updates.on('message_new', async (context: Context, next) => {
			//–º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
			if (await Prefab_Engine(context)) { return await next(); }
			if (context.isOutbox == false && context.senderId > 0 && context.text) {
				//–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				//–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∫–ª–∞—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
				if (await Analyzer_Core_Edition(context)) { return await next(); }
				//–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
				await context.setActivity();
				//–∏—â–µ–º —Å–∞–º—ã–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				let res: { text: string; answer: string; info: string; status: boolean; } = await Answer_Core_Edition({ text: context.text, answer: '', info: '', status: false }, context, vk);
				if (!res.status) { console.log(res.info); return await next(); }
				//—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
				await prisma.user.update({ where: { idvk: context.senderId }, data: { say_me: res.answer.replace(/\r?\n|\r/g, "") } });
				//–Ω–∞–∫–æ–Ω–µ—Ü –¥–æ–±–∞–≤–∏–ª–∏ –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —ç—Ç–∏—Ö %username% –∏ –ø—Ä–æ—á–µ–π —Ñ–∏–≥–Ω–∏=)
				res.answer = await Replacer_System_Params(res.answer, context);
				try {
					//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					if (context.isChat) { await context.reply(`${res.answer}`); } else { await context.send(`${res.answer}`); }
					console.log(res.info);
				} catch (e) {
					console.log(`–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: ${e}`);
				}
			}
			return await next();
		})
		vk.updates.on('wall_reply_new', async (context: Context, next: any) => {
			//—Å–æ–±—ã—Ç–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –Ω–æ –ø–æ–¥—à–∞–º–∞–Ω–∏–º –ø–æ–¥ –∫–ª–∞—Å—Å–∏–∫—É –∂–∞–Ω—Ä–∞
			context.senderId = context.fromId
			//–º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
			if (await Prefab_Engine(context)) { return await next() }
			if (context.fromId > 0 && context.text) {
				//–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–µ–Ω–µ
				//–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∫–ª–∞—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
				if (await Analyzer_Core_Edition(context)) { return await next() }
				//–∏—â–µ–º —Å–∞–º—ã–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				let res: { text: string, answer: string, info: string, status: boolean } = await Answer_Core_Edition({ text: context.text, answer: '', info: '', status: false }, context, vk)
				if (!res.status) { console.log(res.info); return await next() }
				//—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
				await prisma.user.update({ where: { idvk: context.senderId }, data: { say_me: res.answer } })
				//–Ω–∞–∫–æ–Ω–µ—Ü –¥–æ–±–∞–≤–∏–ª–∏ –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —ç—Ç–∏—Ö %username% –∏ –ø—Ä–æ—á–µ–π —Ñ–∏–≥–Ω–∏=)
				res.answer = await Replacer_System_Params(res.answer, context)
				try {
					if (context.isWallComment) {
						//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å—Ç–µ–Ω–µ
						await vk.api.wall.createComment({owner_id: context.ownerId, post_id: context.objectId, reply_to_comment: context.id, guid: context.text, message: `${res.answer}`})
						console.log(res.info)
					}
				} catch (e) {
					console.log(`–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: ${e}`)
				}
			}
			return await next();
		})
		/*vk.updates.on('friend_request', async (context: any, next) => {
			console.log("üöÄ ~ file: index.ts:132 ~ vk.updates.on ~ context:", context)
			const { user_id } = context.payload;
			try {
			  await context.api.friends.add({ user_id });
			  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è`);
			} catch (error) {
			  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id ${user_id} –≤ –¥—Ä—É–∑—å—è`, error);
			}
		  
			return next();
		  });*/
		vk.updates.start().then(() => {
			console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!')
			Answer_Offline(vk)
		}).catch(console.log);
	})
})

//–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç
setInterval(updateStatuses, 120000);